from redis.commands.json._util import JsonType as JsonType
from redis.commands.json.path import Path as Path
from typing import Optional, Union

PathLike = Union[str, Path]

class AsyncJSONCommands:
    async def arrappend(self, name: str, path: Optional[PathLike] = ..., *args: list[JsonType]) -> list[Union[int, None]]: ...
    async def arrindex(self, name: str, path: PathLike, scalar: int, start: Optional[int] = ..., stop: Optional[int] = ...) -> list[Union[int, None]]: ...
    async def arrinsert(self, name: str, path: PathLike, index: int, *args: list[JsonType]) -> list[Union[int, None]]: ...
    async def arrlen(self, name: str, path: Optional[PathLike] = ...) -> list[Union[int, None]]: ...
    async def arrpop(self, name: str, path: Optional[PathLike] = ..., index: Optional[int] = ...) -> list[Union[str, None]]: ...
    async def arrtrim(self, name: str, path: PathLike, start: int, stop: int) -> list[Union[int, None]]: ...
    async def type(self, name: str, path: Optional[PathLike] = ...) -> list[str]: ...
    async def objkeys(self, name: str, path: Optional[PathLike] = ...) -> list[Union[list[str], None]]: ...
    async def objlen(self, name: str, path: Optional[PathLike] = ...) -> int: ...
    async def numincrby(self, name: str, path: PathLike, number: int) -> str: ...
    async def nummultby(self, name: str, path: PathLike, number: int) -> str: ...
    async def clear(self, name: str, path: Optional[PathLike] = ...) -> int: ...
    async def delete(self, key: str, path: Optional[PathLike] = ...) -> int: ...
    forget = delete
    async def get(self, name: str, *args: PathLike, no_escape: Optional[bool] = ...) -> list[JsonType]: ...
    async def mget(self, keys: list[str], path: PathLike) -> list[JsonType]: ...
    async def set(self, name: str, path: PathLike, obj: JsonType, nx: Optional[bool] = ..., xx: Optional[bool] = ..., decode_keys: Optional[bool] = ...) -> Optional[str]: ...
    async def mset(self, triplets: list[tuple[str, str, JsonType]]) -> Optional[str]: ...
    async def merge(self, name: str, path: PathLike, obj: JsonType, decode_keys: Optional[bool] = ...) -> Optional[str]: ...
    async def set_file(self, name: str, path: PathLike, file_name: str, nx: Optional[bool] = ..., xx: Optional[bool] = ..., decode_keys: Optional[bool] = ...) -> Optional[str]: ...
    async def set_path(self, json_path: PathLike, root_folder: str, nx: Optional[bool] = ..., xx: Optional[bool] = ..., decode_keys: Optional[bool] = ...) -> list[dict[str, bool]]: ...
    async def strlen(self, name: str, path: Optional[PathLike] = ...) -> list[Union[int, None]]: ...
    async def toggle(self, name: str, path: Optional[PathLike] = ...) -> Union[bool, list[Optional[int]]]: ...
    async def strappend(self, name: str, value: str, path: Optional[int] = ...) -> Union[int, list[Optional[int]]]: ...
    async def debug(self, subcommand: str, key: Optional[str] = ..., path: Optional[PathLike] = ...) -> Union[int, list[str]]: ...
