import argparse
from utils import fixed_width_formatter
from multiprocessing import cpu_count
from typing import Optional

class AppConfig:
    
    @classmethod
    def parse_args(cls) -> argparse.Namespace:
        parser = argparse.ArgumentParser(
            prog='python -m sdis.app',
            description='An HTTP image server for directories of images generated by Stable Diffusion.',
            formatter_class=fixed_width_formatter(width=80))
        
        parser.add_argument('-l', '--listen', default='0.0.0.0', metavar='LISTEN_ADDR',
            help='address for the HTTP server to listen on')
        parser.add_argument('-p', '--port', type=int, default=7861,
            help='port to host the server on (default: 7861)')
        parser.add_argument('-r', '--redis-uri', default='redis://localhost:6379/0', metavar='REDIS_URI',
            help='the URI of the redis server for storing metadata')
        parser.add_argument('-c', '--clean', action='store_true',
            help='remove existing thumb dir (if any) before processing')
        parser.add_argument('-s', '--selection', action='store_true',
            help='enable selection mode on the website')
        parser.add_argument('-d', '--image-dir', default='', metavar='DIR',
            help='directory to scan for images (default: current dir)')
        parser.add_argument('-w', '--watch', type=int, default=False, const=30, nargs='?',
            metavar='SEC', help='filesystem watch interval in seconds (default: %(default)s)')
        parser.add_argument('-n', '--pagination', type=int, default=200, metavar='ITEMS',
            help='number of items to display per page (default: %(default)s)')
        parser.add_argument('-g', '--group', type=int, default=None, metavar='ITEMS',
            help='number of items to group together (default: %(default)s)')
        parser.add_argument('-o', '--order', default='name', metavar='ORDER',
            choices = ['original', 'random', 'name'],
            help='image listing order: name (default), random, or original')
        parser.add_argument('--thumb-dir', default='shis', metavar='DIR',
            help='directory to store generated website (default: %(default)s)')
        parser.add_argument('--previews', action='store_true',
            help='also generate fullscreen previews (takes more time)')
        parser.add_argument('--ncpus', type=int, default=cpu_count(), metavar='CPUS',
            help='number of workers to spawn (default: all available CPUs)')
        parser.add_argument('--thumb-size', type=int, default=256, metavar='SIZE',
            help='size of generated thumbnails in pixels (default: %(default)s)')
        parser.add_argument('--preview-size', type=int, default=1024, metavar='SIZE',
            help='size of generated previews in pixels (default: %(default)s)')
        parser.add_argument('--regenerate-templates', action='store_true',
                            help='(Debug) Regenerate the HTML templates on startup, even if they already exist.')
        parser.add_argument('--debug', action='store_true',
                            help='Run the server in debug mode.')
        return parser.parse_args()
    
    def __init__(self, args: Optional[argparse.Namespace] = None):
        self.args = args or AppConfig.parse_args()
        
    @property
    def LISTEN_ADDR(self) -> str:
        return self.args.listen_addr
        
    @property
    def PORT(self) -> int:
        return self.args.port
        
    @property
    def REDIS_URI(self) -> str:
        return self.args.redis_uri

    @property
    def CLEAN(self) -> bool:
        return self.args.clean

    @property
    def SELECTION(self) -> bool:
        return self.args.selection

    

    @property
    def IMAGE_DIR(self) -> str | None:
        return self.args.image_dir

    @property
    def WATCH(self) -> bool:
        return self.args.watch

    @property
    def PAGINATION(self) -> int:
        return self.args.pagination

    @property
    def GROUP(self) -> int | None:
        return self.args.group

    @property
    def ORDER(self) -> str:
        return self.args.order

    @property
    def THUMB_DIR(self) -> str | None:
        return self.args.thumb_dir

    @property
    def PREVIEWS(self) -> bool:
        return self.args.previews

    @property
    def NCPUS(self) -> int:
        return self.args.ncpus

    @property
    def THUMB_SIZE(self) -> int:
        return self.args.thumb_size

    @property
    def PREVIEW_SIZE(self) -> int:
        return self.args.preview_size

    @property
    def REGENERATE_TEMPLATES(self) -> bool:
        return self.args.regenerate_templates

    @property
    def DEBUG(self) -> bool:
        return self.args.debug
        
        